name: RLS Security Tests

on:
  push:
    branches: [main, develop, 'feature/**']
    paths:
      - 'prisma/**'
      - 'libs/backend/auth/**'
      - '.github/workflows/rls-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'prisma/**'
      - 'libs/backend/auth/**'

env:
  CI: true
  NODE_ENV: test

jobs:
  rls-unit-tests:
    name: RLS Unit Tests (Mocked)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.19

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate Prisma Client
        run: bunx prisma generate

      - name: Run RLS unit tests (mocked)
        run: |
          nx test backend-auth --testNamePattern="RLS - Mock Tests"

  rls-integration-tests:
    name: RLS Integration Tests (PostgreSQL)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:18-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ftry_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ftry_test
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ftry_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.19

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Setup test database
        run: |
          # Create schema
          bunx prisma db push --force-reset

          # Run RLS migration
          bunx prisma migrate deploy

          # Verify RLS is enabled
          PGPASSWORD=postgres psql -h localhost -U postgres -d ftry_test -c "
            SELECT tablename, rowsecurity
            FROM pg_tables
            WHERE schemaname = 'public'
            AND tablename IN ('User', 'Client', 'Service', 'Appointment');"

      - name: Run RLS integration tests
        run: |
          nx test backend-auth --testPathPattern="rls"
        env:
          CI: true
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ftry_test

      - name: Test RLS policies directly
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d ftry_test -f .github/scripts/test-rls-policies.sql

  rls-security-audit:
    name: RLS Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:18-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ftry_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ftry_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.19

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup database with RLS
        run: |
          bunx prisma db push --force-reset
          bunx prisma migrate deploy

      - name: Run RLS security audit
        run: |
          bun run .github/scripts/rls-security-audit.ts

      - name: Check for RLS violations
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d ftry_test -c "
            -- Check for tables without RLS
            SELECT 'WARNING: Table ' || tablename || ' does not have RLS enabled' as issue
            FROM pg_tables
            WHERE schemaname = 'public'
            AND tablename IN ('User', 'Client', 'Service', 'Appointment', 'Invoice', 'Payment')
            AND NOT rowsecurity

            UNION ALL

            -- Check for missing policies
            SELECT 'WARNING: Table ' || tablename || ' has no RLS policies' as issue
            FROM pg_tables t
            WHERE schemaname = 'public'
            AND rowsecurity = true
            AND NOT EXISTS (
              SELECT 1 FROM pg_policies p
              WHERE p.tablename = t.tablename
            );"

      - name: Generate security report
        if: always()
        run: |
          echo "## RLS Security Audit Report" > rls-report.md
          echo "Generated: $(date)" >> rls-report.md
          echo "" >> rls-report.md

          PGPASSWORD=postgres psql -h localhost -U postgres -d ftry_test -t -c "
            SELECT '### Tables with RLS Enabled:' || E'\\n' ||
            string_agg('- ' || tablename, E'\\n')
            FROM pg_tables
            WHERE schemaname = 'public' AND rowsecurity = true;"
          >> rls-report.md

          PGPASSWORD=postgres psql -h localhost -U postgres -d ftry_test -t -c "
            SELECT E'\\n### RLS Policies by Table:' || E'\\n' ||
            string_agg(
              '#### ' || tablename || E'\\n' ||
              '- Policy: ' || policyname || E'\\n' ||
              '- Command: ' || cmd || E'\\n' ||
              '- Permissive: ' || permissive || E'\\n',
              E'\\n'
            )
            FROM pg_policies
            WHERE schemaname = 'public';"
          >> rls-report.md

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rls-security-report
          path: rls-report.md

  performance-test:
    name: RLS Performance Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:18-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ftry_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ftry_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.19

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup database with sample data
        run: |
          bunx prisma db push --force-reset
          bunx prisma migrate deploy
          bun run .github/scripts/seed-performance-test.ts

      - name: Run performance benchmarks
        run: |
          bun run .github/scripts/rls-performance-test.ts > performance-results.json

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('performance-results.json', 'utf8'));

            const comment = `## ðŸ“Š RLS Performance Test Results

            | Metric | Without RLS | With RLS | Impact |
            |--------|------------|----------|--------|
            | Avg Query Time | ${results.withoutRls.avgTime}ms | ${results.withRls.avgTime}ms | ${results.impact}% |
            | P95 Query Time | ${results.withoutRls.p95}ms | ${results.withRls.p95}ms | - |
            | P99 Query Time | ${results.withoutRls.p99}ms | ${results.withRls.p99}ms | - |

            **Verdict**: ${results.verdict}

            <details>
            <summary>Detailed Results</summary>

            \`\`\`json
            ${JSON.stringify(results, null, 2)}
            \`\`\`
            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });