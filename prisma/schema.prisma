generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                 String     @id @default(cuid())
  name               String     @db.VarChar(255)
  slug               String     @unique @db.VarChar(100)
  description        String?
  logo               String?    @db.VarChar(500)
  website            String?    @db.VarChar(255)
  subscriptionPlan   String     @default("free") @db.VarChar(50)
  subscriptionStatus String     @default("active") @db.VarChar(50)
  subscriptionExpiry DateTime?  @db.Timestamptz(6)
  maxUsers           Int        @default(5) @db.SmallInt
  settings           Json?
  metadata           Json?
  status             String     @default("active") @db.VarChar(50)
  createdAt          DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime   @updatedAt @db.Timestamptz(6)
  auditLogs          AuditLog[]
  roles              Role[]
  users              User[]

  @@index([slug])
  @@index([status])
}

model User {
  id                     String         @id @default(cuid())
  email                  String         @unique @db.VarChar(255)
  password               String         @db.VarChar(255)
  firstName              String         @db.VarChar(100)
  lastName               String         @db.VarChar(100)
  phone                  String?        @db.VarChar(20)
  avatar                 String?        @db.VarChar(500)
  tenantId               String?
  emailVerified          Boolean        @default(false)
  emailVerificationToken String?        @db.VarChar(255)
  passwordResetToken     String?        @db.VarChar(255)
  passwordResetExpiry    DateTime?      @db.Timestamptz(6)
  lastLogin              DateTime?      @db.Timestamptz(6)
  loginAttempts          Int            @default(0) @db.SmallInt
  lockedUntil            DateTime?      @db.Timestamptz(6)
  roleId                 String
  additionalPermissions  String[]       @default([])
  status                 String         @default("active") @db.VarChar(50)
  isDeleted              Boolean        @default(false)
  deletedAt              DateTime?      @db.Timestamptz(6)
  metadata               Json?
  createdBy              String?
  createdAt              DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime       @updatedAt @db.Timestamptz(6)
  phoneEncrypted         String?        @db.VarChar(500)
  phoneHash              String?        @db.VarChar(64)
  auditLogs              AuditLog[]
  refreshTokens          RefreshToken[]
  sessions               Session[]
  creator                User?          @relation("UserCreator", fields: [createdBy], references: [id])
  createdUsers           User[]         @relation("UserCreator")
  role                   Role           @relation(fields: [roleId], references: [id])
  tenant                 Tenant?        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email, tenantId])
  @@index([tenantId])
  @@index([roleId])
  @@index([email])
  @@index([status])
  @@index([phoneHash])
  @@index([tenantId, status])
  @@index([tenantId, roleId])
  @@index([email, status])
}

model RefreshToken {
  id            String    @id @default(cuid())
  token         String    @unique @db.VarChar(500)
  userId        String
  deviceInfo    String?   @db.VarChar(255)
  ipAddress     String?   @db.VarChar(45)
  expiresAt     DateTime  @db.Timestamptz(6)
  revokedAt     DateTime? @db.Timestamptz(6)
  revokedReason String?   @db.VarChar(255)
  isRevoked     Boolean   @default(false)
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([expiresAt, isRevoked])
  @@index([userId, isRevoked])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  deviceInfo   String?  @db.VarChar(255)
  ipAddress    String?  @db.VarChar(45)
  userAgent    String?  @db.VarChar(500)
  lastActivity DateTime @default(now()) @db.Timestamptz(6)
  expiresAt    DateTime @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  description String?
  tenantId    String?
  type        String   @default("custom") @db.VarChar(50)
  level       Int      @default(0) @db.SmallInt
  permissions String[] @default([])
  metadata    Json?
  isSystem    Boolean  @default(false)
  isDefault   Boolean  @default(false)
  status      String   @default("active") @db.VarChar(50)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  tenant      Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users       User[]

  @@unique([name, tenantId])
  @@index([tenantId])
  @@index([type])
  @@index([status])
  @@index([tenantId, type])
  @@index([tenantId, status])
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(100)
  description String
  resource    String   @db.VarChar(100)
  action      String   @db.VarChar(50)
  category    String   @db.VarChar(100)
  metadata    Json?
  isSystem    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  @@unique([resource, action])
  @@index([category])
  @@index([resource])
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  tenantId     String?
  action       String   @db.VarChar(100)
  resource     String?  @db.VarChar(100)
  resourceId   String?
  method       String?  @db.VarChar(10)
  path         String?  @db.VarChar(500)
  statusCode   Int?     @db.SmallInt
  ipAddress    String?  @db.VarChar(45)
  userAgent    String?  @db.VarChar(500)
  oldData      Json?
  newData      Json?
  metadata     Json?
  success      Boolean  @default(true)
  errorMessage String?
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  tenant       Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tenantId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([tenantId, createdAt(sort: Desc)])
  @@index([tenantId, action])
  @@index([tenantId, resource])
}
